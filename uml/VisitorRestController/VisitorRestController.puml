@startuml VisitorRestController
!theme plain
skinparam sequence {
    ArrowColor Black
    ActorBorderColor Black
    LifeLineBorderColor Black
    LifeLineBackgroundColor LightGoldenRodYellow
    ParticipantBorderColor Black
    ParticipantBackgroundColor LightGoldenRodYellow
    ParticipantFontSize 11
    ActorFontSize 11
    MessageAlign direction
}

title 방문자 통계 API 시퀀스 다이어그램

actor Client as "클라이언트"
participant VisitorRestController as "VisitorRestController"
participant RestHelper as "RestHelper"
participant VisitorService as "VisitorService"
participant VisitorServiceImpl as "VisitorServiceImpl"
participant VisitorMapper as "VisitorMapper"
participant Database as "Database"


== 방문자 통계 조회 API ==

Client -> VisitorRestController: GET /api/visitor/count
note right
  방문자 통계 조회 요청
  최근 5년 연도별, 
  최근 1년 월별,
  최근 7일 일별 통계
end note

activate VisitorRestController

VisitorRestController -> VisitorService: getVisitorStats()
note right
  방문자 통계 데이터 요청
end note

activate VisitorService

VisitorServiceImpl -> VisitorMapper: getAllVisitorStatistics()
note right
  전체 방문자 통계 데이터 조회
  날짜 오름차순 정렬
end note

activate VisitorMapper

VisitorMapper -> Database: SELECT visitor_statistic_id, daily_visitor_sum, reg_date, edit_date\nFROM visitor_statistic ORDER BY reg_date ASC
activate Database
Database --> VisitorMapper: List<VisitorStatistic>
deactivate Database

VisitorMapper --> VisitorServiceImpl: List<VisitorStatistic>
deactivate VisitorMapper

note over VisitorServiceImpl
  데이터 가공 처리:
  1. 현재 시간 기준 필터링 날짜 계산
     - 1년 전: now.minusMonths(11)
     - 5년 전: now.minusYears(4)
     - 7일 전: now.minusDays(7)
  
  2. 통계용 Map 초기화
     - monthlyStats: Map<String, Integer>
     - yearlyStats: Map<String, Integer>
     - dailyStats: Map<String, Integer>
  
  3. 전체 데이터 순회하여 통계 계산
     - 연별 통계 (최근 5년)
     - 월별 통계 (최근 1년)
     - 일별 통계 (최근 7일)
end note

VisitorServiceImpl -> VisitorServiceImpl: 데이터 가공 및 통계 계산

VisitorServiceImpl --> VisitorService: VisitorStatsDto.builder()\n.monthlyStats(monthlyStats)\n.yearlyStats(yearlyStats)\n.dailyStats(dailyStats)\n.build()
deactivate VisitorService

VisitorRestController -> RestHelper: sendJson(data)
note right
  JSON 응답 형태로 변환
end note

activate RestHelper
RestHelper --> VisitorRestController: Map<String, Object>
deactivate RestHelper

VisitorRestController --> Client: HTTP 200 OK\n{ "status": 200, "message": "성공", "data": VisitorStatsDto }
note left
  방문자 통계 응답:
  - monthlyStats: 월별 방문자 (년-월: 방문자수)
  - yearlyStats: 연도별 방문자 (년: 방문자수)
  - dailyStats: 일별 방문자 (월-일: 방문자수)
  - totalVisitors: 총 방문자수
end note

deactivate VisitorRestController

== 에러 처리 ==

VisitorRestController -> VisitorRestController: 예외 발생 시
VisitorRestController --> Client: HTTP 500 Internal Server Error\n{ "status": 500, "message": "서버 내부 오류" }

@enduml
